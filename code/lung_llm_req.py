# -*- coding: utf-8 -*-
"""lung_llm_req.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MFFnG07b-3eXKPPKn9sxHXwCWqwFz0yt

- There are 5 sections contained in the paper: Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm

- Within these sections, we are checking for 3 main requirements - Completeness, Inconsistencies/Contradictions, Ambiguity

- There are 5 section-wise prompts and 1 global prompt checking for each of the requirements

# Completeness
"""

# for the global prompt

# note - ISO standards not specified
comp_global_prompt = """
The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.
Based on the content given:
1. Are there any incomplete and/or missing details in the Introduction?
2. Are there any incomplete and/or missing details in the System Requirements?
3. Are there any incomplete and/or missing details in the GUI Requirements?
4. Are there any incomplete and/or missing details in the Controller Requirements?
5. Are there any incomplete and/or missing details in the Alarms section?
6. Are there any incomplete and/or missing details in the Input references specified within the content in the System Requirements that refer to the ISO Standards, EU Directive 2007/47/EC, or the IEC Standards?
7. Are there any incomplete and/or missing details in the Input references specified within the content in the System Requirements that refer to other System Requirements specified within the content?
8. Are there any incomplete and/or missing details in the Input references specified within the content in the GUI Requirements that refer to the System Requirements specified within the content?
9. Are there any incomplete and/or missing details in the Input references specified within the content in the Controller Requirements that link to the System Requirements specified within the content?
10. Are there any incomplete and/or missing details in the Input references specified within the content in the Alarms section that link to the System Requirements specified within the content?
11. Are there any incomplete and/or missing details in the Input references specified within the content in the Alarms section that refer to the ISO Standards, EU Directive 2007/47/EC, or the IEC Standards?
"""

# for the section-wise prompt

comp_introduction_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting solely of the Introduction section. Evaluate the content for incompleteness or missing details, and document any identified issues.
Based on the content given:
1. Are there any incomplete and/or missing details specifically about the Mechanical Lung Ventilator?
2. Are there any incomplete and/or missing details in the Introduction section as a whole?
"""

# section 2.4.1 consists of images (not included in the prompt)
comp_system_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting solely of the System Requirements section. Evaluate the content for incompleteness or missing details, and document any identified issues.
Based on the content given:
1. Are there any incomplete and/or missing details in the System Requirements section as a whole? (Evaluate all sub-sections in the System Requirements whether any necessary information is lacking or if there are gaps in coverage based on industry standards, regulations, or best practices.)
2. Is the Functional Requirements table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
3. Is the Measured and Displayed Parameters table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
4. In the Values and Ranges sub-section, is the Common values and ranges table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
5. In the Values and Ranges sub-section, is the Default values and ranges for PCV parameters table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
6. In the Values and Ranges sub-section, is the Default values and ranges for PSV parameters table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
7. In the Values and Ranges sub-section, is the Default Alarm Thresholds Values and Ranges table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
8. In the Sensors and Interfaces sub-section, is the Interface between GUI and controller table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
9. In the Sensors and Interfaces sub-section, is the Interface between Hardware and controller table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
10. In the Sensors and Interfaces sub-section, is the Alarm Requirements table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
"""

comp_gui_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of only the GUI Requirements section. Evaluate the content for incompleteness or missing details, and document any identified issues.
Based on the content given:
1. Are there any incomplete and/or missing details in the GUI Requirements section as a whole? (Evaluate all sub-sections in the GUI Requirements whether any necessary information is lacking or if there are gaps in coverage based on industry standards, regulations, or best practices.)
2. Is the GUI Requirements table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
3. Is the Start-up Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
4. In the Start-up Mode sub-section, is the Start-up Configuration Parameters table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
5. Is the Start Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
6. Is the Menu Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
7. Is the Self-Test Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
8. Is the Ventilation Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
9. Is the Show Real Time Data Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
10. Is the Settings Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
11. Is the Frozen Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
12. Is the Alarm settings Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
"""

comp_controller_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of only the Controller Requirements section. Evaluate the content for incompleteness or missing details, and document any identified issues.
Based on the content given:
1. Are there any incomplete and/or missing details in the Controller Requirements section as a whole? (Evaluate all sub-sections in the Controller Requirements whether any necessary information is lacking or if there are gaps in coverage based on industry standards, regulations, or best practices.)
2. Is the Controller Requirements table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
3. Is the Start-up Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
4. Is the SelfTest Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
5. Is the PCV Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
6. Is the PSV Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
7. Is the Requirements Common to all Modes table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
"""

comp_alarm_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of only the Alarms section. Evaluate the content for incompleteness or missing details, and document any identified issues.
Based on the content given:
1. Are there any incomplete and/or missing details in the Alarms section as a whole? (Evaluate all sub-sections in the Alarm Requirements whether any necessary information is lacking or if there are gaps in coverage based on industry standards, regulations, or best practices.)
2. Is the Alarms table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
3. Is the Alarms List table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
4. Is the Visual Alarm Signals table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)
"""

"""# Inconsistencies / Contradictions"""

# for the global prompt

# note - ISO standards not specified
cont_global_prompt = """
The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for inconsistencies or contradictions, and document any identified issues.
Based on the content given:
1. Are there any inconsistencies and/or contradictions in the Introduction?
2. Are there any inconsistencies and/or contradictions in the System Requirements?
3. Are there any inconsistencies and/or contradictions in the GUI Requirements?
4. Are there any inconsistencies and/or contradictions in the Controller Requirements?
5. Are there any inconsistencies and/or contradictions in the Alarms section?
6. Are there any inconsistencies and/or contradictions between the Introduction and System Requirements sections?
7. Are there any inconsistencies and/or contradictions between the Introduction and GUI Requirements sections?
8. Are there any inconsistencies and/or contradictions between the Introduction and Controller Requirements sections?
9. Are there any inconsistencies and/or contradictions between the Introduction and Alarm List sections?
10. Are there any inconsistencies and/or contradictions between the System Requirements and GUI Requirements sections?
11. Are there any inconsistencies and/or contradictions between the System Requirements and Controller Requirements sections?
12. Are there any inconsistencies and/or contradictions between the System Requirements and Alarm List sections?
13. Are there any inconsistencies and/or contradictions between the GUI Requirements and Controller Requirements sections?
14. Are there any inconsistencies and/or contradictions between the GUI Requirements and Alarm List sections?
15. Are there any inconsistencies and/or contradictions between the Controller Requirements and Alarm List sections?
"""

# for the section-wise prompt

cont_introduction_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting solely of the Introduction section. Evaluate the content for inconsistencies or contradictions, and document any identified issues.
Based on the content given:
1. Are there any inconsistencies and/or contradictions present in the Introduction section as a whole?
2. Are there any inconsistencies and/or contradictions present specifically in the details about the Mechanical Lung Ventilator?
"""

# section 2.4.1 consists of images (not included in the prompt)
cont_system_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting solely of the System Requirements section. Evaluate the content for inconsistencies or contradictions, and document any identified issues.
Based on the content given:
1. Are there any inconsistencies and/or contradictions present in the System Requirements section as a whole? (Evaluate any inconsistencies or contradictions between all the sub-sections in the System Requirements section.)
2. Are there any inconsistencies and/or contradictions within the Functional Requirements table? (Evaluate any inconsistencies or contradictions within the Functional Requirements table.)
3. Are there any inconsistencies and/or contradictions within the Measured and Displayed Parameters table? (Evaluate any inconsistencies or contradictions within the Measured and Displayed Parameters table.)
4. Are there any inconsistencies and/or contradictions within the Values and Ranges sub-section? (Evaluate any inconsistencies or contradictions within the Values and Ranges sub-section.)
5. Are there any inconsistencies and/or contradictions within the Sensors and Interfaces sub-section? (Evaluate any inconsistencies or contradictions within the Sensors and Interfaces sub-section.)
6. Are there any inconsistencies and/or contradictions within the Alarm Requirements? (Evaluate any inconsistencies or contradictions within the Alarm Requirements.)
"""

cont_gui_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting solely of the GUI Requirements section. Evaluate the content for inconsistencies or contradictions, and document any identified issues.
Based on the content given:
1. Are there any inconsistencies and/or contradictions present in the GUI Requirements section as a whole? (Evaluate any inconsistencies or contradictions between all the sub-sections in the GUI Requirements section.)
2. Are there any inconsistencies and/or contradictions within the GUI Requirements table? (Evaluate any inconsistencies or contradictions within the GUI Requirements table.)
3. Are there any inconsistencies and/or contradictions within the Start-up Mode subsection? (Evaluate any inconsistencies or contradictions within the Start-up Mode subsection.)
4. Are there any inconsistencies and/or contradictions within the Start Mode subsection? (Evaluate any inconsistencies or contradictions within the Start Mode subsection.)
5. Are there any inconsistencies and/or contradictions within the Menu Mode subsection? (Evaluate any inconsistencies or contradictions within the Menu Mode subsection.)
6. Are there any inconsistencies and/or contradictions within the Self-Test Mode subsection? (Evaluate any inconsistencies or contradictions within the Self-Test Mode subsection.)
7. Are there any inconsistencies and/or contradictions within the Ventilation Mode subsection? (Evaluate any inconsistencies or contradictions within the Ventilation Mode subsection.)
8. Are there any inconsistencies and/or contradictions within the Show Real Time Data Mode subsection? (Evaluate any inconsistencies or contradictions within the Show Real Time Data Mode subsection.)
9. Are there any inconsistencies and/or contradictions within the Settings Mode subsection? (Evaluate any inconsistencies or contradictions within the Settings Mode subsection.)
10. Are there any inconsistencies and/or contradictions within the Frozen Mode subsection? (Evaluate any inconsistencies or contradictions within the Frozen Mode subsection.)
11. Are there any inconsistencies and/or contradictions within the Alarm settings Mode subsection? (Evaluate any inconsistencies or contradictions within the Alarm settings Mode subsection.)
"""

cont_controller_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting solely of the Controller Requirements section. Evaluate the content for inconsistencies or contradictions, and document any identified issues.
Based on the content given:
1. Are there any inconsistencies and/or contradictions present in the Controller Requirements section as a whole? (Evaluate any inconsistencies or contradictions between all the sub-sections in the Controller Requirements section.)
2. Are there any inconsistencies and/or contradictions within the Controller requirements table? (Evaluate any inconsistencies or contradictions within the Controller Requirements table.)
3. Are there any inconsistencies and/or contradictions within the Start-up Mode subsection? (Evaluate any inconsistencies or contradictions within the Start-up Mode subsection.)
4. Are there any inconsistencies and/or contradictions within the SelfTest Mode subsection? (Evaluate any inconsistencies or contradictions within the SelfTest Mode subsection.)
5. Are there any inconsistencies and/or contradictions within the PCV Mode subsection? (Evaluate any inconsistencies or contradictions within the PCV Mode subsection.)
6. Are there any inconsistencies and/or contradictions within the PSV Mode subsection? (Evaluate any inconsistencies or contradictions within the PSV Mode subsection.)
7. Are there any inconsistencies and/or contradictions within the Requirements Common to all Modes subsection? (Evaluate any inconsistencies or contradictions within the Requirements Common to all Modes subsection.)
"""

cont_alarm_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting solely of the Alarms section. Evaluate the content for inconsistencies or contradictions, and document any identified issues.
Based on the content given:
1. Are there any inconsistencies and/or contradictions present in the Alarms section as a whole? (Evaluate any inconsistencies or contradictions between all the sub-sections in the Alarms section.)
2. Are there any inconsistencies and/or contradictions within the Alarms table? (Evaluate any inconsistencies or contradictions within the Alarms table.)
3. Are there any inconsistencies and/or contradictions within the Alarm list subsection? (Evaluate any inconsistencies or contradictions within the Alarm list subsection.)
4. Are there any inconsistencies and/or contradictions within the Visual alarm signals subsection? (Evaluate any inconsistencies or contradictions within the Visual alarm signals subsection.)
"""

"""# Ambiguity"""

# for the global prompt

# note - ISO standards not specified
ambi_global_prompt = """
The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarms sections. Evaluate the content for ambiguities, unclear statements, or potential misunderstandings, and document any identified issues.
Based on the content given:
1. Are there any ambiguities or unclear statements in the Introduction section?
2. Are there any ambiguities or unclear statements in the System Requirements section?
3. Are there any ambiguities or unclear statements in the GUI Requirements section?
4. Are there any ambiguities or unclear statements in the Controller Requirements section?
5. Are there any ambiguities or unclear statements in the Alarms section?
6. Are there any ambiguities or unclear statements between the Introduction and System Requirements sections?
7. Are there any ambiguities or unclear statements between the Introduction and GUI Requirements sections?
8. Are there any ambiguities or unclear statements between the Introduction and Controller Requirements sections?
9. Are there any ambiguities or unclear statements between the Introduction and Alarms sections?
10. Are there any ambiguities or unclear statements between the System Requirements and GUI Requirements sections?
11. Are there any ambiguities or unclear statements between the System Requirements and Controller Requirements sections?
12. Are there any ambiguities or unclear statements between the System Requirements and Alarms sections?
13. Are there any ambiguities or unclear statements between the GUI Requirements and Controller Requirements sections?
14. Are there any ambiguities or unclear statements between the GUI Requirements and Alarms sections?
15. Are there any ambiguities or unclear statements between the Controller Requirements and Alarms sections?
"""

# for the section-wise prompt

ambi_introduction_prompt = """
The following contains the detailed software requirements specification of a Mechanical Lung Ventilator provided between triple backticks. Evaluate the Introduction section and its sub-sections for ambiguities, unclear statements, or potential misunderstandings, and document any identified issues.
Based on the content given:
1. Are there any ambiguities or unclear statements in the Introduction section as a whole?
2. Are there any ambiguities or unclear statements in the Mechanical lung ventilator subsection?
3. Are there any ambiguities or unclear statements in the Structure of the document subsection?
4. Are there any ambiguities or unclear statements in the Suggested outcomes subsection?
"""

# section 2.4.1 consists of images (not included in the prompt)
ambi_system_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting solely of the System Requirements section. Evaluate the content for ambiguities, unclear statements, or potential misunderstandings, and document any identified issues.
Based on the content given:
1. Are there any ambiguities or unclear statements present in the System Requirements section as a whole? (Evaluate any ambiguities or unclear statements between all the sub-sections in the System Requirements section.)
2. Are there any ambiguities or unclear statements within the Functional Requirements table? (Evaluate any ambiguities or unclear statements within the Functional Requirements table.)
3. Are there any ambiguities or unclear statements within the Measured and Displayed Parameters table? (Evaluate any ambiguities or unclear statements within the Measured and Displayed Parameters table.)
4. Are there any ambiguities or unclear statements within the Values and Ranges sub-section? (Evaluate any ambiguities or unclear statements within the Values and Ranges sub-section.)
5. Are there any ambiguities or unclear statements within the Sensors and Interfaces sub-section? (Evaluate any ambiguities or unclear statements within the Sensors and Interfaces sub-section.)
6. Are there any ambiguities or unclear statements within the Alarm Requirements? (Evaluate any ambiguities or unclear statements within the Alarm Requirements.)
"""

ambi_gui_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting solely of the GUI Requirements section. Evaluate the content for ambiguities, unclear statements, or potential misunderstandings, and document any identified issues.
Based on the content given:
1. Are there any ambiguities or unclear statements present in the GUI Requirements section as a whole? (Evaluate any ambiguities or unclear statements between the section and all its sub-sections in the GUI Requirements section.)
2. Are there any ambiguities or unclear statements within the GUI Requirements table? (Evaluate any ambiguities or unclear statements within the GUI Requirements table.)
3. Are there any ambiguities or unclear statements within the Start-up Mode subsection? (Evaluate any ambiguities or unclear statements within the Start-up Mode subsection.)
4. Are there any ambiguities or unclear statements within the Start Mode subsection? (Evaluate any ambiguities or unclear statements within the Start Mode subsection.)
5. Are there any ambiguities or unclear statements within the Menu Mode subsection? (Evaluate any ambiguities or unclear statements within the Menu Mode subsection.)
6. Are there any ambiguities or unclear statements within the Self-Test Mode subsection? (Evaluate any ambiguities or unclear statements within the Self-Test Mode subsection.)
7. Are there any ambiguities or unclear statements within the Ventilation Mode subsection? (Evaluate any ambiguities or unclear statements within the Ventilation Mode subsection.)
8. Are there any ambiguities or unclear statements within the Show Real Time Data Mode subsection? (Evaluate any ambiguities or unclear statements within the Show Real Time Data Mode subsection.)
9. Are there any ambiguities or unclear statements within the Settings Mode subsection? (Evaluate any ambiguities or unclear statements within the Settings Mode subsection.)
10. Are there any ambiguities or unclear statements within the Frozen Mode subsection? (Evaluate any ambiguities or unclear statements within the Frozen Mode subsection.)
11. Are there any ambiguities or unclear statements within the Alarm settings Mode subsection? (Evaluate any ambiguities or unclear statements within the Alarm settings Mode subsection.)
"""

ambi_controller_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting solely of the Controller Requirements section. Evaluate the content for ambiguities, unclear statements, or potential misunderstandings, and document any identified issues.
Based on the content given:
1. Are there any ambiguities or unclear statements present in the Controller Requirements section as a whole? (Evaluate any ambiguities or unclear statements between the section and all its sub-sections in the Controller Requirements section.)
2. Are there any ambiguities or unclear statements within the Controller requirements table? (Evaluate any ambiguities or unclear statements within the Controller Requirements table.)
3. Are there any ambiguities or unclear statements within the Start-up Mode subsection? (Evaluate any ambiguities or unclear statements within the Start-up Mode subsection.)
4. Are there any ambiguities or unclear statements within the SelfTest Mode subsection? (Evaluate any ambiguities or unclear statements within the SelfTest Mode subsection.)
5. Are there any ambiguities or unclear statements within the PCV Mode subsection? (Evaluate any ambiguities or unclear statements within the PCV Mode subsection.)
6. Are there any ambiguities or unclear statements within the PSV Mode subsection? (Evaluate any ambiguities or unclear statements within the PSV Mode subsection.)
7. Are there any ambiguities or unclear statements within the Requirements Common to all Modes subsection? (Evaluate any ambiguities or unclear statements within the Requirements Common to all Modes subsection.)
"""

ambi_alarm_prompt = """
The following contains an excerpt from a detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting solely of the Alarms section. Evaluate the content for ambiguities, unclear statements, or potential misunderstandings, and document any identified issues.
Based on the content given:
1. Are there any ambiguities or unclear statements present in the Alarms section as a whole? (Evaluate any ambiguities or unclear statements between the section and all its sub-sections in the Alarms section.)
2. Are there any ambiguities or unclear statements within the Alarms table? (Evaluate any ambiguities or unclear statements within the Alarms table.)
3. Are there any ambiguities or unclear statements within the Alarm list subsection? (Evaluate any ambiguities or unclear statements within the Alarm list subsection.)
4. Are there any ambiguities or unclear statements within the Visual alarm signals subsection? (Evaluate any ambiguities or unclear statements within the Visual alarm signals subsection.)
"""

"""# Local with Global Context"""

# Full context section-wise prompts

comp_introduction_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any incomplete and/or missing details specifically about the Mechanical Lung Ventilator?\n2. Are there any incomplete and/or missing details in the Introduction section as a whole?\n'
comp_system_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any incomplete and/or missing details in the System Requirements section as a whole? (Evaluate all sub-sections in the System Requirements whether any necessary information is lacking or if there are gaps in coverage based on industry standards, regulations, or best practices.)\n2. Is the Functional Requirements table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n3. Is the Measured and Displayed Parameters table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n4. In the Values and Ranges sub-section, is the Common values and ranges table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n5. In the Values and Ranges sub-section, is the Default values and ranges for PCV parameters table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n6. In the Values and Ranges sub-section, is the Default values and ranges for PSV parameters table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n7. In the Values and Ranges sub-section, is the Default Alarm Thresholds Values and Ranges table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n8. In the Sensors and Interfaces sub-section, is the Interface between GUI and controller table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n9. In the Sensors and Interfaces sub-section, is the Interface between Hardware and controller table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n10. In the Sensors and Interfaces sub-section, is the Alarm Requirements table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n'
comp_gui_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any incomplete and/or missing details in the GUI Requirements section as a whole? (Evaluate all sub-sections in the GUI Requirements whether any necessary information is lacking or if there are gaps in coverage based on industry standards, regulations, or best practices.)\n2. Is the GUI Requirements table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n3. Is the Start-up Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n4. In the Start-up Mode sub-section, is the Start-up Configuration Parameters table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n5. Is the Start Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n6. Is the Menu Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n7. Is the Self-Test Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n8. Is the Ventilation Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n9. Is the Show Real Time Data Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n10. Is the Settings Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n11. Is the Frozen Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n12. Is the Alarm settings Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n'
comp_controller_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any incomplete and/or missing details in the Controller Requirements section as a whole? (Evaluate all sub-sections in the Controller Requirements whether any necessary information is lacking or if there are gaps in coverage based on industry standards, regulations, or best practices.)\n2. Is the Controller Requirements table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n3. Is the Start-up Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n4. Is the SelfTest Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n5. Is the PCV Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n6. Is the PSV Mode table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n7. Is the Requirements Common to all Modes table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n'
comp_alarm_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any incomplete and/or missing details in the Alarms section as a whole? (Evaluate all sub-sections in the Alarm Requirements whether any necessary information is lacking or if there are gaps in coverage based on industry standards, regulations, or best practices.)\n2. Is the Alarms table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n3. Is the Alarms List table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n4. Is the Visual Alarm Signals table, including the fields for ID, Requirement/Rationale, and Input Reference, complete? (Assess whether all required fields are adequately filled out and whether any crucial details are missing from the table.)\n'
cont_introduction_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any inconsistencies and/or contradictions present in the Introduction section as a whole?\n2. Are there any inconsistencies and/or contradictions present specifically in the details about the Mechanical Lung Ventilator?\n'
cont_system_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any inconsistencies and/or contradictions present in the System Requirements section as a whole? (Evaluate any inconsistencies or contradictions between all the sub-sections in the System Requirements section.)\n2. Are there any inconsistencies and/or contradictions within the Functional Requirements table? (Evaluate any inconsistencies or contradictions within the Functional Requirements table.)\n3. Are there any inconsistencies and/or contradictions within the Measured and Displayed Parameters table? (Evaluate any inconsistencies or contradictions within the Measured and Displayed Parameters table.)\n4. Are there any inconsistencies and/or contradictions within the Values and Ranges sub-section? (Evaluate any inconsistencies or contradictions within the Values and Ranges sub-section.)\n5. Are there any inconsistencies and/or contradictions within the Sensors and Interfaces sub-section? (Evaluate any inconsistencies or contradictions within the Sensors and Interfaces sub-section.)\n6. Are there any inconsistencies and/or contradictions within the Alarm Requirements? (Evaluate any inconsistencies or contradictions within the Alarm Requirements.)\n'
cont_gui_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any inconsistencies and/or contradictions present in the GUI Requirements section as a whole? (Evaluate any inconsistencies or contradictions between all the sub-sections in the GUI Requirements section.)\n2. Are there any inconsistencies and/or contradictions within the GUI Requirements table? (Evaluate any inconsistencies or contradictions within the GUI Requirements table.)\n3. Are there any inconsistencies and/or contradictions within the Start-up Mode subsection? (Evaluate any inconsistencies or contradictions within the Start-up Mode subsection.)\n4. Are there any inconsistencies and/or contradictions within the Start Mode subsection? (Evaluate any inconsistencies or contradictions within the Start Mode subsection.)\n5. Are there any inconsistencies and/or contradictions within the Menu Mode subsection? (Evaluate any inconsistencies or contradictions within the Menu Mode subsection.)\n6. Are there any inconsistencies and/or contradictions within the Self-Test Mode subsection? (Evaluate any inconsistencies or contradictions within the Self-Test Mode subsection.)\n7. Are there any inconsistencies and/or contradictions within the Ventilation Mode subsection? (Evaluate any inconsistencies or contradictions within the Ventilation Mode subsection.)\n8. Are there any inconsistencies and/or contradictions within the Show Real Time Data Mode subsection? (Evaluate any inconsistencies or contradictions within the Show Real Time Data Mode subsection.)\n9. Are there any inconsistencies and/or contradictions within the Settings Mode subsection? (Evaluate any inconsistencies or contradictions within the Settings Mode subsection.)\n10. Are there any inconsistencies and/or contradictions within the Frozen Mode subsection? (Evaluate any inconsistencies or contradictions within the Frozen Mode subsection.)\n11. Are there any inconsistencies and/or contradictions within the Alarm settings Mode subsection? (Evaluate any inconsistencies or contradictions within the Alarm settings Mode subsection.)\n'
cont_controller_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any inconsistencies and/or contradictions present in the Controller Requirements section as a whole? (Evaluate any inconsistencies or contradictions between all the sub-sections in the Controller Requirements section.)\n2. Are there any inconsistencies and/or contradictions within the Controller requirements table? (Evaluate any inconsistencies or contradictions within the Controller Requirements table.)\n3. Are there any inconsistencies and/or contradictions within the Start-up Mode subsection? (Evaluate any inconsistencies or contradictions within the Start-up Mode subsection.)\n4. Are there any inconsistencies and/or contradictions within the SelfTest Mode subsection? (Evaluate any inconsistencies or contradictions within the SelfTest Mode subsection.)\n5. Are there any inconsistencies and/or contradictions within the PCV Mode subsection? (Evaluate any inconsistencies or contradictions within the PCV Mode subsection.)\n6. Are there any inconsistencies and/or contradictions within the PSV Mode subsection? (Evaluate any inconsistencies or contradictions within the PSV Mode subsection.)\n7. Are there any inconsistencies and/or contradictions within the Requirements Common to all Modes subsection? (Evaluate any inconsistencies or contradictions within the Requirements Common to all Modes subsection.)\n'
cont_alarm_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any inconsistencies and/or contradictions present in the Alarms section as a whole? (Evaluate any inconsistencies or contradictions between all the sub-sections in the Alarms section.)\n2. Are there any inconsistencies and/or contradictions within the Alarms table? (Evaluate any inconsistencies or contradictions within the Alarms table.)\n3. Are there any inconsistencies and/or contradictions within the Alarm list subsection? (Evaluate any inconsistencies or contradictions within the Alarm list subsection.)\n4. Are there any inconsistencies and/or contradictions within the Visual alarm signals subsection? (Evaluate any inconsistencies or contradictions within the Visual alarm signals subsection.)\n'
ambi_introduction_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any ambiguities or unclear statements in the Introduction section as a whole?\n2. Are there any ambiguities or unclear statements in the Mechanical lung ventilator subsection?\n3. Are there any ambiguities or unclear statements in the Structure of the document subsection?\n4. Are there any ambiguities or unclear statements in the Suggested outcomes subsection?\n'
ambi_system_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any ambiguities or unclear statements present in the System Requirements section as a whole? (Evaluate any ambiguities or unclear statements between all the sub-sections in the System Requirements section.)\n2. Are there any ambiguities or unclear statements within the Functional Requirements table? (Evaluate any ambiguities or unclear statements within the Functional Requirements table.)\n3. Are there any ambiguities or unclear statements within the Measured and Displayed Parameters table? (Evaluate any ambiguities or unclear statements within the Measured and Displayed Parameters table.)\n4. Are there any ambiguities or unclear statements within the Values and Ranges sub-section? (Evaluate any ambiguities or unclear statements within the Values and Ranges sub-section.)\n5. Are there any ambiguities or unclear statements within the Sensors and Interfaces sub-section? (Evaluate any ambiguities or unclear statements within the Sensors and Interfaces sub-section.)\n6. Are there any ambiguities or unclear statements within the Alarm Requirements? (Evaluate any ambiguities or unclear statements within the Alarm Requirements.)\n'
ambi_gui_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any ambiguities or unclear statements present in the GUI Requirements section as a whole? (Evaluate any ambiguities or unclear statements between the section and all its sub-sections in the GUI Requirements section.)\n2. Are there any ambiguities or unclear statements within the GUI Requirements table? (Evaluate any ambiguities or unclear statements within the GUI Requirements table.)\n3. Are there any ambiguities or unclear statements within the Start-up Mode subsection? (Evaluate any ambiguities or unclear statements within the Start-up Mode subsection.)\n4. Are there any ambiguities or unclear statements within the Start Mode subsection? (Evaluate any ambiguities or unclear statements within the Start Mode subsection.)\n5. Are there any ambiguities or unclear statements within the Menu Mode subsection? (Evaluate any ambiguities or unclear statements within the Menu Mode subsection.)\n6. Are there any ambiguities or unclear statements within the Self-Test Mode subsection? (Evaluate any ambiguities or unclear statements within the Self-Test Mode subsection.)\n7. Are there any ambiguities or unclear statements within the Ventilation Mode subsection? (Evaluate any ambiguities or unclear statements within the Ventilation Mode subsection.)\n8. Are there any ambiguities or unclear statements within the Show Real Time Data Mode subsection? (Evaluate any ambiguities or unclear statements within the Show Real Time Data Mode subsection.)\n9. Are there any ambiguities or unclear statements within the Settings Mode subsection? (Evaluate any ambiguities or unclear statements within the Settings Mode subsection.)\n10. Are there any ambiguities or unclear statements within the Frozen Mode subsection? (Evaluate any ambiguities or unclear statements within the Frozen Mode subsection.)\n11. Are there any ambiguities or unclear statements within the Alarm settings Mode subsection? (Evaluate any ambiguities or unclear statements within the Alarm settings Mode subsection.)\n'
ambi_controller_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any ambiguities or unclear statements present in the Controller Requirements section as a whole? (Evaluate any ambiguities or unclear statements between the section and all its sub-sections in the Controller Requirements section.)\n2. Are there any ambiguities or unclear statements within the Controller requirements table? (Evaluate any ambiguities or unclear statements within the Controller Requirements table.)\n3. Are there any ambiguities or unclear statements within the Start-up Mode subsection? (Evaluate any ambiguities or unclear statements within the Start-up Mode subsection.)\n4. Are there any ambiguities or unclear statements within the SelfTest Mode subsection? (Evaluate any ambiguities or unclear statements within the SelfTest Mode subsection.)\n5. Are there any ambiguities or unclear statements within the PCV Mode subsection? (Evaluate any ambiguities or unclear statements within the PCV Mode subsection.)\n6. Are there any ambiguities or unclear statements within the PSV Mode subsection? (Evaluate any ambiguities or unclear statements within the PSV Mode subsection.)\n7. Are there any ambiguities or unclear statements within the Requirements Common to all Modes subsection? (Evaluate any ambiguities or unclear statements within the Requirements Common to all Modes subsection.)\n'
ambi_alarm_ctx_prompt = 'The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarm List sections. Evaluate the content for incompleteness or missing details, and document any identified issues.\nBased on the content given:\n1. Are there any ambiguities or unclear statements present in the Alarms section as a whole? (Evaluate any ambiguities or unclear statements between the section and all its sub-sections in the Alarms section.)\n2. Are there any ambiguities or unclear statements within the Alarms table? (Evaluate any ambiguities or unclear statements within the Alarms table.)\n3. Are there any ambiguities or unclear statements within the Alarm list subsection? (Evaluate any ambiguities or unclear statements within the Alarm list subsection.)\n4. Are there any ambiguities or unclear statements within the Visual alarm signals subsection? (Evaluate any ambiguities or unclear statements within the Visual alarm signals subsection.)\n'

"""# Specific Issues / Questions"""

issue_text_map = {
  '2': 'Is it possible to set ventilation parameters while having the patient connected. According to FUN10.5, this is forbidden. But Figure 2 allows that.',
  '3': 'Is the function "start ventilation" available only if the patient is connected? If no, what happens if the start ventilation is selected without having the patient connected? In other words, is the following scenario possible (we are in the standby mode): Select the "start ventilation". Connect the patient. The ventilation starts',
  '4': 'For FUN20 I can now see how breathingCycle start/end, and expirationPhase start/end can be defined, but in FUN 25 and 26, I can only see when the breathing cycle starts and when the expiration phase starts, but not how either of them finish. Perhaps I am not interpreting the graphs correctly. Could you tell me how the breathing cycle ends and expiration phase ends in PSV mode?',
  '5a': 'FUN.9 says "Once the self-test has been completed successfully and configurations have been loaded properly the system shall start monitoring and reporting health parameters." is this supposed to indicate a mode change to \'Ventilation Mode\' (as per Figure 2.1)?',
  '5b': 'FUN.9 triggers the transition to Standby Mode but so does FUN10.4. Is there a reason for this repetition?',
  '6': 'In several places, requirements have sub-requirements (e.g. FUN.5 then has FUN.5.1 -- FUN.5.3) that seem to add detail/support the \'main\' requirement. In other places, however, (e.g. FUN.4) there is a lot of detail contained in one requirement. I was wondering, in general, what your view of the relationship is between a requirement and its sub-requirements. For example, are they extra clauses in addition to the main requirement? Do the sub-requirements combine to \'implement\' what the main requirement says? Or is it something else?',
  '8a': 'In a normal case, does start-up-ended of the controller occur before that of the GUI?',
  '8b': 'In a normal case, can GUI be faster than the controller? Can GUI be in the state Start before the controller was in the state SelfTest.',
  '8c': 'For the point 3, I think that when the controller is in the state SelfTest, the GUI may be either in the state Start or SelfTest or even in the state StartUp.',
  '12': 'Unless I\'m mistaken, I did not see default/rang values for max_exp_pause and max_ins_pause.',
  '14a': 'Is it acceptable to start ventilation for a new patient without setting the desired parameters for that patient? According to Figure 3.1, it is possible. That means ventilation will be performed with default values?',
  '14b': 'Some parameters (PEEP, FiO2, ...) do not have default values. Does this mean that any value (belonging to the range) can be chosen in the StartUp mode?',
  '16a': 'According to the requirement document, the system should measure and display some parameters. However, no information is given about how they are calculated: Peak Pinsp, Vtidal, PAW, etc.',
  '16b': 'The system should measure some parameters, like FiO2 and PEEP, while these parameters are set by the user. May the measured values be different from that set by the user?',
  '17': 'When the user updates the parameters during a ventilation (inspiration or expiration), does this imply that the inspiration/expiration duration is updated too?',
  '18': 'There should be a sensor that give the state of each valve to the controller. No such sensor is described in Page 20. From my understanding, the valves can fail. In general, It should be a sensor for each information read by the controller. Can we consider sensors as safe? What do you think?',
  '19': 'AL44 and AL 45: How can the controller drive the valves to their safe states if they have a failure? Do you mean that the controller can force them?',
  '15': 'Why is Target inspiratory pressure (P_insp) not considered as a common parameter for PSV and PVS? Same question for ITS. Why do we have ITS and ITS_psv?',
}

#### NEED TO MODIFY THIS

issues_global_prompt = """
The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarms sections.
Based on the content given answer the following question raised as issues:
Issue #2: Moreover, is it possible to set ventilation parameters while having the patient connected. According to FUN10.5, this is forbidden. But Figure 2 allows that.
Issue #3: Is the function "start ventilation" available only if the patient is connected? If no, what happens if the start ventilation is selected without having the patient connected? In other words, is the following scenario possible (we are in the standby mode): Select the "start ventilation". Connect the patient. The ventilation starts
Issue #4: For FUN20 I can now see how breathingCycle start/end, and expirationPhase start/end can be defined, but in FUN 25 and 26, I can only see when the breathing cycle starts and when the expiration phase starts, but not how either of them finish. Perhaps I am not interpreting the graphs correctly. Could you tell me how the breathing cycle ends and expiration phase ends in PSV mode?
Issue #5a: FUN.9 says "Once the self-test has been completed successfully and configurations have been loaded properly the system shall start monitoring and reporting health parameters." is this supposed to indicate a mode change to 'Ventilation Mode' (as per Figure 2.1)?
Issue #5b: FUN.9 triggers the transition to Standby Mode but so does FUN10.4. Is there a reason for this repetition?
Issue #6: In several places, requirements have sub-requirements (e.g. FUN.5 then has FUN.5.1 -- FUN.5.3) that seem to add detail/support the 'main' requirement. In other places, however, (e.g. FUN.4) there is a lot of detail contained in one requirement. I was wondering, in general, what your view of the relationship is between a requirement and its sub-requirements. For example, are they extra clauses in addition to the main requirement? Do the sub-requirements combine to 'implement' what the main requirement says? Or is it something else?
Issue #8a: In a normal case, does start-up-ended of the controller occur before that of the GUI?
Issue #8b: In a normal case, can GUI be faster than the controller? Can GUI be in the state Start before the controller was in the state SelfTest.
Issue #8c: For the point 3, I think that when the controller is in the state SelfTest, the GUI may be either in the state Start or SelfTest or even in the state StartUp.
Issue #12: Unless I'm mistaken, I did not see default/rang values for max_exp_pause and max_ins_pause.
Issue #14a: Is it acceptable to start ventilation for a new patient without setting the desired parameters for that patient? According to Figure 3.1, it is possible. That means ventilation will be performed with default values?
Issue #14b: Some parameters (PEEP, FiO2, ...) do not have default values. Does this mean that any value (belonging to the range) can be chosen in the StartUp mode?
Issue #16a: According to the requirement document, the system should measure and display some parameters. However, no information is given about how they are calculated: Peak Pinsp, Vtidal, PAW, etc.
Issue #16b: The system should measure some parameters, like FiO2 and PEEP, while these parameters are set by the user. May the measured values be different from that set by the user?
Issue #17: When the user updates the parameters during a ventilation (inspiration or expiration), does this imply that the inspiration/expiration duration is updated too?
Issue #18: There should be a sensor that give the state of each valve to the controller. No such sensor is described in Page 20. From my understanding, the valves can fail. In general, It should be a sensor for each information read by the controller. Can we consider sensors as safe? What do you think?
Issue #19: AL44 and AL 45: How can the controller drive the valves to their safe states if they have a failure? Do you mean that the controller can force them?
Issue #15: Why is Target inspiratory pressure (P_insp) not considered as a common parameter for PSV and PVS? Same question for ITS. Why do we have ITS and ITS_psv?
"""

"""# Running the model"""

#################### DEFINE WHICH FOLDER TO USE

fnumber = str(0)  # for paper 5

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

import os
!pip install openai==0.28

def checker(astr):
  name = astr.split()[0].lower()
  return name if (name in sections) else 'global'

sections = ['global', 'introduction', 'system', 'controller', 'gui', 'alarm']
requirements = ['comp', 'cont', 'ambi']

file_section = {}

fpath = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/All Cleaned Data with Images')
dirs = os.listdir(fpath)
for d in dirs:
  with open(os.path.join(fpath, d), "r") as f:
    content = f.read()
  file_section[checker(d.replace('.txt', ''))] = content
file_section.keys()

import openai
# import time

openai.api_key = ''

def template_str(prompt):
  return {'role': 'user', 'content': prompt}

################################## for Completeness
completeness_prompts = {}
for section in sections:
  var_name = 'comp_' + section + '_prompt'
  combined_prompt = globals()[var_name] + '\n\n' + '```\n' + file_section[section] + '```\n'
  completeness_prompts[section] = combined_prompt
completeness_prompts.keys()

# for GPT 4 Turbo

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT4 with Images')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Completeness'), exist_ok = True)

keys = list(completeness_prompts.keys())

for key in keys:
  g = open(os.path.join(results_path, 'Completeness','') + key + '.txt', 'w+')

  updated_messages = template_str(completeness_prompts[key])

  answers = openai.ChatCompletion.create(
    model='gpt-4-turbo-preview',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

# for GPT 3.5

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Completeness'), exist_ok = True)

keys = list(completeness_prompts.keys())

for key in keys[1:]:
  g = open(os.path.join(results_path, 'Completeness','') + key + '.txt', 'w+')

  updated_messages = template_str(completeness_prompts[key])

  answers = openai.ChatCompletion.create(
    model='gpt-3.5-turbo',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

################################## for Inconsistencies / Contradictions
contradictions_prompts = {}
for section in sections:
  var_name = 'cont_' + section + '_prompt'
  combined_prompt = globals()[var_name] + '\n\n' + '```\n' + file_section[section] + '```\n'
  contradictions_prompts[section] = combined_prompt
contradictions_prompts.keys()

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT4 with Images')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Inconsistencies'), exist_ok = True)

keys = list(contradictions_prompts.keys())

for key in keys:
  g = open(os.path.join(results_path, 'Inconsistencies','') + key + '.txt', 'w+')

  updated_messages = template_str(contradictions_prompts[key])

  answers = openai.ChatCompletion.create(
    model='gpt-4-turbo-preview',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Inconsistencies'), exist_ok = True)

keys = list(contradictions_prompts.keys())

for key in keys[1:]:
  g = open(os.path.join(results_path, 'Inconsistencies','') + key + '.txt', 'w+')

  updated_messages = template_str(contradictions_prompts[key])

  answers = openai.ChatCompletion.create(
    model='gpt-3.5-turbo',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

################################## for Ambiguities
ambiguities_prompts = {}
for section in sections:
  var_name = 'ambi_' + section + '_prompt'
  combined_prompt = globals()[var_name] + '\n\n' + '```\n' + file_section[section] + '```\n'
  ambiguities_prompts[section] = combined_prompt
ambiguities_prompts.keys()

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT4 with Images')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Ambiguities'), exist_ok = True)

keys = list(ambiguities_prompts.keys())

for key in keys:
  g = open(os.path.join(results_path, 'Ambiguities','') + key + '.txt', 'w+')

  updated_messages = template_str(ambiguities_prompts[key])

  answers = openai.ChatCompletion.create(
    model='gpt-4-turbo-preview',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Ambiguities'), exist_ok = True)

keys = list(ambiguities_prompts.keys())

for key in keys[1:]:
  g = open(os.path.join(results_path, 'Ambiguities','') + key + '.txt', 'w+')

  updated_messages = template_str(ambiguities_prompts[key])

  answers = openai.ChatCompletion.create(
    model='gpt-3.5-turbo',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

"""# Local with Global Context Running"""

def checker(astr):
  name = astr.split()[0].lower()
  return name if (name in sections) else 'global'

for i in range(3,5):
  fnumber = str(i)

  file_section = {}

  fpath = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/All Cleaned Data with Images')
  dirs = os.listdir(fpath)
  for d in dirs:
    with open(os.path.join(fpath, d), "r") as f:
      content = f.read()
    file_section[checker(d.replace('.txt', ''))] = content

  sections = ['introduction', 'system', 'controller', 'gui', 'alarm']
  requirements = ['comp', 'cont', 'ambi']

  ################################## for Completeness
  completeness_ctx_prompts = {}

  for section in sections:
    var_name = 'comp_' + section + '_ctx_prompt'
    combined_prompt = globals()[var_name] + '\n\n' + '\n' + file_section['global'] + '\n'
    completeness_ctx_prompts[section] = combined_prompt
  completeness_ctx_prompts.keys()

  # for GPT 4 Turbo

  results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT4 with Images/Local with Global Context')
  os.makedirs(results_path, exist_ok = True)
  os.makedirs(os.path.join(results_path, 'Completeness'), exist_ok = True)

  keys = list(completeness_ctx_prompts.keys())

  for key in keys:
    g = open(os.path.join(results_path, 'Completeness','') + key + '.txt', 'w+')

    updated_messages = template_str(completeness_prompts[key])

    answers = openai.ChatCompletion.create(
      model='gpt-4-turbo-preview',
      temperature=0,
      messages=[updated_messages]
    )
    res = answers['choices'][0]['message']['content']
    g.write(res)
    g.write('\n')
    g.close()

  # for GPT 3.5

  results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images/Local with Global Context')
  os.makedirs(results_path, exist_ok = True)
  os.makedirs(os.path.join(results_path, 'Completeness'), exist_ok = True)

  keys = list(completeness_ctx_prompts.keys())

  for key in keys[1:]:
    g = open(os.path.join(results_path, 'Completeness','') + key + '.txt', 'w+')

    updated_messages = template_str(completeness_prompts[key])

    answers = openai.ChatCompletion.create(
      model='gpt-3.5-turbo',
      temperature=0,
      messages=[updated_messages]
    )
    res = answers['choices'][0]['message']['content']
    g.write(res)
    g.write('\n')
    g.close()

  ################################## for Contradictions
  contradictions_ctx_prompts = {}

  for section in sections:
    var_name = 'comp_' + section + '_ctx_prompt'
    combined_prompt = globals()[var_name] + '\n\n' + '\n' + file_section['global'] + '\n'
    contradictions_ctx_prompts[section] = combined_prompt
  contradictions_ctx_prompts.keys()

  # for GPT 4 Turbo

  results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT4 with Images/Local with Global Context')
  os.makedirs(results_path, exist_ok = True)
  os.makedirs(os.path.join(results_path, 'Inconsistencies'), exist_ok = True)

  keys = list(contradictions_ctx_prompts.keys())

  for key in keys:
    g = open(os.path.join(results_path, 'Inconsistencies','') + key + '.txt', 'w+')

    updated_messages = template_str(contradictions_prompts[key])

    answers = openai.ChatCompletion.create(
      model='gpt-4-turbo-preview',
      temperature=0,
      messages=[updated_messages]
    )
    res = answers['choices'][0]['message']['content']
    g.write(res)
    g.write('\n')
    g.close()

  # for GPT 3.5

  results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images/Local with Global Context')
  os.makedirs(results_path, exist_ok = True)
  os.makedirs(os.path.join(results_path, 'Inconsistencies'), exist_ok = True)

  keys = list(contradictions_ctx_prompts.keys())

  for key in keys[1:]:
    g = open(os.path.join(results_path, 'Inconsistencies','') + key + '.txt', 'w+')

    updated_messages = template_str(contradictions_prompts[key])

    answers = openai.ChatCompletion.create(
      model='gpt-3.5-turbo',
      temperature=0,
      messages=[updated_messages]
    )
    res = answers['choices'][0]['message']['content']
    g.write(res)
    g.write('\n')
    g.close()

  ################################## for Ambiguities
  ambiguities_ctx_prompts = {}

  for section in sections:
    var_name = 'comp_' + section + '_ctx_prompt'
    combined_prompt = globals()[var_name] + '\n\n' + '\n' + file_section['global'] + '\n'
    ambiguities_ctx_prompts[section] = combined_prompt
  ambiguities_ctx_prompts.keys()

  # for GPT 4 Turbo

  results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT4 with Images/Local with Global Context')
  os.makedirs(results_path, exist_ok = True)
  os.makedirs(os.path.join(results_path, 'Ambiguities'), exist_ok = True)

  keys = list(ambiguities_ctx_prompts.keys())

  for key in keys:
    g = open(os.path.join(results_path, 'Ambiguities','') + key + '.txt', 'w+')

    updated_messages = template_str(ambiguities_prompts[key])

    answers = openai.ChatCompletion.create(
      model='gpt-4-turbo-preview',
      temperature=0,
      messages=[updated_messages]
    )
    res = answers['choices'][0]['message']['content']
    g.write(res)
    g.write('\n')
    g.close()

  # for GPT 3.5

  results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images/Local with Global Context')
  os.makedirs(results_path, exist_ok = True)
  os.makedirs(os.path.join(results_path, 'Ambiguities'), exist_ok = True)

  keys = list(ambiguities_ctx_prompts.keys())

  for key in keys[1:]:
    g = open(os.path.join(results_path, 'Ambiguities','') + key + '.txt', 'w+')

    updated_messages = template_str(ambiguities_prompts[key])

    answers = openai.ChatCompletion.create(
      model='gpt-3.5-turbo',
      temperature=0,
      messages=[updated_messages]
    )
    res = answers['choices'][0]['message']['content']
    g.write(res)
    g.write('\n')
    g.close()

for i in range(6):
  fnumber = str(i)

  file_section = {}

  fpath = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/All Cleaned Data with Images')
  dirs = os.listdir(fpath)
  for d in dirs:
    with open(os.path.join(fpath, d), "r") as f:
      content = f.read()
    file_section[checker(d.replace('.txt', ''))] = content

  sections = ['introduction', 'system', 'controller', 'gui', 'alarm']
  requirements = ['comp', 'cont', 'ambi']

  ################################## for Completeness
  completeness_ctx_prompts = {}

  for section in sections:
    var_name = 'comp_' + section + '_ctx_prompt'
    combined_prompt = globals()[var_name] + '\n\n' + '\n' + file_section['global'] + '\n'
    completeness_ctx_prompts[section] = combined_prompt
  completeness_ctx_prompts.keys()

  # for GPT 3.5

  results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images/Local with Global Context')
  os.makedirs(results_path, exist_ok = True)
  os.makedirs(os.path.join(results_path, 'Completeness'), exist_ok = True)

  keys = list(completeness_ctx_prompts.keys())

  for key in keys[:1]:
    g = open(os.path.join(results_path, 'Completeness','') + key + '.txt', 'w+')

    updated_messages = template_str(completeness_prompts[key])

    answers = openai.ChatCompletion.create(
      model='gpt-3.5-turbo',
      temperature=0,
      messages=[updated_messages]
    )
    res = answers['choices'][0]['message']['content']
    g.write(res)
    g.write('\n')
    g.close()

  ################################## for Contradictions
  contradictions_ctx_prompts = {}

  for section in sections:
    var_name = 'comp_' + section + '_ctx_prompt'
    combined_prompt = globals()[var_name] + '\n\n' + '\n' + file_section['global'] + '\n'
    contradictions_ctx_prompts[section] = combined_prompt
  contradictions_ctx_prompts.keys()

  # for GPT 3.5

  results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images/Local with Global Context')
  os.makedirs(results_path, exist_ok = True)
  os.makedirs(os.path.join(results_path, 'Inconsistencies'), exist_ok = True)

  keys = list(contradictions_ctx_prompts.keys())

  for key in keys[:1]:
    g = open(os.path.join(results_path, 'Inconsistencies','') + key + '.txt', 'w+')

    updated_messages = template_str(contradictions_prompts[key])

    answers = openai.ChatCompletion.create(
      model='gpt-3.5-turbo',
      temperature=0,
      messages=[updated_messages]
    )
    res = answers['choices'][0]['message']['content']
    g.write(res)
    g.write('\n')
    g.close()

  ################################## for Ambiguities
  ambiguities_ctx_prompts = {}

  for section in sections:
    var_name = 'comp_' + section + '_ctx_prompt'
    combined_prompt = globals()[var_name] + '\n\n' + '\n' + file_section['global'] + '\n'
    ambiguities_ctx_prompts[section] = combined_prompt
  ambiguities_ctx_prompts.keys()

  # for GPT 3.5

  results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images/Local with Global Context')
  os.makedirs(results_path, exist_ok = True)
  os.makedirs(os.path.join(results_path, 'Ambiguities'), exist_ok = True)

  keys = list(ambiguities_ctx_prompts.keys())

  for key in keys[:1]:
    g = open(os.path.join(results_path, 'Ambiguities','') + key + '.txt', 'w+')

    updated_messages = template_str(ambiguities_prompts[key])

    answers = openai.ChatCompletion.create(
      model='gpt-3.5-turbo',
      temperature=0,
      messages=[updated_messages]
    )
    res = answers['choices'][0]['message']['content']
    g.write(res)
    g.write('\n')
    g.close()

#################### DEFINE WHICH FOLDER TO USE

fnumber = str(5)  # for paper 5

file_section = {}

fpath = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/All Cleaned Data with Images')
dirs = os.listdir(fpath)
for d in dirs:
  with open(os.path.join(fpath, d), "r") as f:
    content = f.read()
  file_section[checker(d.replace('.txt', ''))] = content

sections = ['introduction', 'system', 'controller', 'gui', 'alarm']
requirements = ['comp', 'cont', 'ambi']

file_section.keys()

################################## for Completeness
completeness_ctx_prompts = {}

for section in sections:
  var_name = 'comp_' + section + '_ctx_prompt'
  combined_prompt = globals()[var_name] + '\n\n' + '\n' + file_section['global'] + '\n'
  completeness_ctx_prompts[section] = combined_prompt
completeness_ctx_prompts.keys()

# for GPT 4 Turbo

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT4 with Images/Local with Global Context')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Completeness'), exist_ok = True)

keys = list(completeness_ctx_prompts.keys())

for key in keys:
  g = open(os.path.join(results_path, 'Completeness','') + key + '.txt', 'w+')

  updated_messages = template_str(completeness_prompts[key])

  answers = openai.ChatCompletion.create(
    model='gpt-4-turbo-preview',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

# for GPT 3.5

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images/Local with Global Context')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Completeness'), exist_ok = True)

keys = list(completeness_ctx_prompts.keys())

for key in keys[1:]:
  g = open(os.path.join(results_path, 'Completeness','') + key + '.txt', 'w+')

  updated_messages = template_str(completeness_prompts[key])

  answers = openai.ChatCompletion.create(
    model='gpt-3.5-turbo',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

################################## for Contradictions
contradictions_ctx_prompts = {}

for section in sections:
  var_name = 'comp_' + section + '_ctx_prompt'
  combined_prompt = globals()[var_name] + '\n\n' + '\n' + file_section['global'] + '\n'
  contradictions_ctx_prompts[section] = combined_prompt
contradictions_ctx_prompts.keys()

# for GPT 4 Turbo

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT4 with Images/Local with Global Context')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Inconsistencies'), exist_ok = True)

keys = list(contradictions_ctx_prompts.keys())

for key in keys:
  g = open(os.path.join(results_path, 'Inconsistencies','') + key + '.txt', 'w+')

  updated_messages = template_str(contradictions_prompts[key])

  answers = openai.ChatCompletion.create(
    model='gpt-4-turbo-preview',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

# for GPT 3.5

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images/Local with Global Context')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Inconsistencies'), exist_ok = True)

keys = list(contradictions_ctx_prompts.keys())

for key in keys[1:]:
  g = open(os.path.join(results_path, 'Inconsistencies','') + key + '.txt', 'w+')

  updated_messages = template_str(contradictions_prompts[key])

  answers = openai.ChatCompletion.create(
    model='gpt-3.5-turbo',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

################################## for Ambiguities
ambiguities_ctx_prompts = {}

for section in sections:
  var_name = 'comp_' + section + '_ctx_prompt'
  combined_prompt = globals()[var_name] + '\n\n' + '\n' + file_section['global'] + '\n'
  ambiguities_ctx_prompts[section] = combined_prompt
ambiguities_ctx_prompts.keys()

# for GPT 4 Turbo

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT4 with Images/Local with Global Context')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Ambiguities'), exist_ok = True)

keys = list(ambiguities_ctx_prompts.keys())

for key in keys:
  g = open(os.path.join(results_path, 'Ambiguities','') + key + '.txt', 'w+')

  updated_messages = template_str(ambiguities_prompts[key])

  answers = openai.ChatCompletion.create(
    model='gpt-4-turbo-preview',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

# for GPT 3.5

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images/Local with Global Context')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Ambiguities'), exist_ok = True)

keys = list(ambiguities_ctx_prompts.keys())

for key in keys[1:]:
  g = open(os.path.join(results_path, 'Ambiguities','') + key + '.txt', 'w+')

  updated_messages = template_str(ambiguities_prompts[key])

  answers = openai.ChatCompletion.create(
    model='gpt-3.5-turbo',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

"""# GPT-Vision for generating Text descriptions"""

import base64
import requests

# OpenAI API Key
api_key = ''

# Function to encode the image
def encode_image(image_path):
  with open(image_path, "rb") as image_file:
    return base64.b64encode(image_file.read()).decode('utf-8')

figure_prompts = {
    '1.1_figure': "Given the UML diagram of the high level software architecture of a mechanical lung ventilator, provide a descriptive prompt that exactly describes the UML diagram. Make sure to briefly mention the figure label in the beginning. Provide the descriptions in well-defined points.",
    '2.1_figure': "Given the UML diagram of the high level operation diagram of a mechanical lung ventilator, provide a descriptive prompt that exactly describes the UML diagram. Make sure to briefly mention the figure label in the beginning. Provide the descriptions in well-defined points.",
    '2.2_figure': "Given the UML diagram of the high level view of ventilator sensors of a mechanical lung ventilator, provide a descriptive prompt that exactly describes the UML diagram. Make sure to briefly mention the figure label in the beginning. Provide the descriptions in well-defined points.",
    '3.1_figure': "Given the UML diagram of the GUI state machine of a mechanical lung ventilator, provide a descriptive prompt that exactly describes the UML diagram. Make sure to briefly mention the figure label in the beginning. Provide the descriptions in well-defined points.",
    '3.2_figure': "Given the UML diagram of the draft of GUI of a mechanical lung ventilator, provide a descriptive prompt that exactly describes the UML diagram. Make sure to briefly mention the figure label in the beginning. Provide the descriptions in well-defined points.",
    '4.1_figure': "Given the UML diagram of the high level software architecture of a mechanical lung ventilator, provide a descriptive prompt that exactly describes the UML diagram. Make sure to briefly mention the figure label in the beginning. Provide the descriptions in well-defined points.",
}

# Path to your image
image_base = '/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/Figures/Figure Images/'
image_text_base = '/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/Figure_texts/'
# image_path = '/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/Figures/controller_state_machine.jpeg'

fnumber = str(5)

figure_file_names = [
    '1.1_figure',
    '2.1_figure',
    '2.2_figure',
    '3.1_figure',
    '3.2_figure',
    '4.1_figure',
]

for i, file_name in enumerate(figure_file_names):
  if i == 0: continue
  image_input_path = os.path.join(image_base, fnumber, file_name + '.png')
  image_text_path = os.path.join(image_text_base, fnumber, file_name + '.txt')

  # Getting the base64 string
  base64_image = encode_image(image_input_path)

  headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {api_key}"
  }

  prompt_text = figure_prompts[file_name]
  payload = {
    "model": "gpt-4-vision-preview",
    "messages": [
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": prompt_text
          },
          {
            "type": "image_url",
            "image_url": {
              "url": f"data:image/jpeg;base64,{base64_image}"
            }
          }
        ]
      }
    ],
    "max_tokens": 1500
  }

  response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)

  # with open('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/Figure_texts/controller_state_machine.txt', 'w+') as f:
  with open(image_text_path, 'w+') as f:
    f.write(response.json()['choices'][0]['message']['content'])
    print(response.json()['choices'][0]['message']['content'])

"""# Figure Ambiguities"""

# # image_input_path = os.path.join(image_base, fnumber, file_name + '.png')
# image_input_path = '/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/5/With Image Description/5 - Figure_images/4.1_figure.png'

# # Getting the base64 string
# base64_image = encode_image(image_input_path)

# headers = {
#   "Content-Type": "application/json",
#   "Authorization": f"Bearer {api_key}"
# }

# payload = {
#   "model": "gpt-4-vision-preview",
#   "messages": [
#     {
#       "role": "user",
#       "content": [
#         {
#           "type": "text",
#           "text": "Based on the diagram of the Controller state machine provided, detect any ambiguities."
#         },
#         {
#           "type": "image_url",
#           "image_url": {
#             "url": f"data:image/jpeg;base64,{base64_image}"
#           }
#         }
#       ]
#     }
#   ],
#   "max_tokens": 500
# }

# response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)

# print(response.json()['choices'][0]['message']['content'])

fnumber = str(0)

# for GPT 4

fpath = '/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/'+ fnumber + '/With Image Description/' + fnumber +' - Figure Texts/'
figs = os.listdir(fpath)
figs_keys = ["The high-level software architecture", "High level view of ventilator sensors" , "GUI state machine", "Draft of GUI", "Controller state machine", "High level operation diagram"]
figs_dict = dict(zip(figs, figs_keys))

output_path = '/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/' + fnumber + '/With Image Description/Results - GPT4 with Images/Figure Ambiguities/'
os.makedirs(output_path, exist_ok=True)

for f in figs_dict.keys():
  prompt = "Based on the text description of" + figs_dict[f] + "provided in triple backticks, detect any ambiguities."
  with open(fpath + f, 'r') as a:
    content = a.read()

  prompt += '\n```\n' + content + '\n```'

  updated_messages = template_str(prompt)

  answers = openai.ChatCompletion.create(
    model='gpt-4-turbo-preview',
    temperature=0,
    messages=[updated_messages]
  )
  g = open(output_path + f, 'w+')
  res = answers['choices'][0]['message']['content']
  print(res)
  print('\n')
  g.write(res)
  g.write('\n')
  g.close()

# for GPT 3.5

fpath = '/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/'+ fnumber + '/With Image Description/' + fnumber +' - Figure Texts/'
figs = os.listdir(fpath)
figs_keys = ["The high-level software architecture", "High level view of ventilator sensors" , "GUI state machine", "Draft of GUI", "Controller state machine", "High level operation diagram"]
figs_dict = dict(zip(figs, figs_keys))

output_path = '/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/' + fnumber + '/With Image Description/Results - GPT3.5 with Images/Figure Ambiguities/'
os.makedirs(output_path, exist_ok=True)

for f in figs_dict.keys():
  prompt = "Based on the text description of" + figs_dict[f] + "provided in triple backticks, detect any ambiguities."
  with open(fpath + f, 'r') as a:
    content = a.read()

  prompt += '\n```\n' + content + '\n```'

  updated_messages = template_str(prompt)

  answers = openai.ChatCompletion.create(
    model='gpt-3.5-turbo',
    temperature=0,
    messages=[updated_messages]
  )
  g = open(output_path + f, 'w+')
  res = answers['choices'][0]['message']['content']
  print(res)
  print('\n')
  g.write(res)
  g.write('\n')
  g.close()

"""# Issues Part

- #2: system + alarms
- #3: system
- #4: system
- #5a: system
- #5b: system
- #6: system
- #8a: gui + controller
- #8b: gui + controller
- #8c: gui + controller
- #12: system
- #14a: gui+ controller
- #14b: system
- #16a: system
- #16b: system
- #17: system
- #18: system
- #19: alarms + controller
- #15: system
"""

#################### DEFINE WHICH FOLDER TO USE

fnumber = str(5)  # for paper 5

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

import os
!pip install openai==0.28

doc_w_image_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/All Cleaned Data with Images')

def load_file(path):
  f = open(path, 'r')
  res = f.read()
  f.close()
  return res

system_path = os.path.join(doc_w_image_path, 'System Requirements.txt')
system_file = load_file(system_path)
gui_path = os.path.join(doc_w_image_path, 'GUI Requirements.txt')
gui_file = load_file(gui_path)
controller_path = os.path.join(doc_w_image_path, 'Controller Requirements.txt')
controller_file = load_file(controller_path)
alarm_path = os.path.join(doc_w_image_path, 'Alarm.txt')
alarm_file = load_file(alarm_path)
defs_path = os.path.join(doc_w_image_path, 'Definitions.txt')
defs_file = load_file(defs_path)
full_mech_path = os.path.join(doc_w_image_path, 'mech_lung_ventilator.txt')
full_file = load_file(full_mech_path)

issue_files_map = {
  '2': (system_file, alarm_file),
  '3': (system_file,),
  '4': (system_file,),
  '5a': (system_file,),
  '5b': (system_file,),
  '6': (system_file,),
  '8a': (gui_file, controller_file),
  '8b': (gui_file, controller_file),
  '8c': (gui_file, controller_file),
  '12': (system_file,),
  '14a': (gui_file, controller_file),
  '14b': (system_file,),
  '16a': (system_file,),
  '16b': (system_file,),
  '17': (system_file,),
  '18': (system_file,),
  '19': (alarm_file, controller_file),
  '15': (system_file,),
}

issue_file_names_map = {
  '2': 'System Requirements and Alarms sections',
  '3': 'System Requirements section',
  '4': 'System Requirements section',
  '5a': 'System Requirements section',
  '5b': 'System Requirements section',
  '6': 'System Requirements section',
  '8a': 'GUI Requirements and Controller Requirements sections',
  '8b': 'GUI Requirements and Controller Requirements sections',
  '8c': 'GUI Requirements and Controller Requirements sections',
  '12': 'System Requirements section',
  '14a': 'GUI Requirements and Controller Requirements sections',
  '14b': 'System Requirements section',
  '16a': 'System Requirements section',
  '16b': 'System Requirements section',
  '17': 'System Requirements section',
  '18': 'System Requirements section',
  '19': 'Alarms and Controller Requirements sections',
  '15': 'System Requirements section',
}

import openai
# import time

openai.api_key = ''

def template_str(prompt):
  return {'role': 'user', 'content': prompt}

store_path1 = '/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/5/With Image Description/Results - GPT3.5 with Images/Issues/Section-wise/'
store_path2 = '/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/5/With Image Description/Results - GPT4 with Images/Issues/Section-wise/'
os.makedirs(store_path1, exist_ok=True)
os.makedirs(store_path2, exist_ok=True)

for issue_id, files in issue_files_map.items():
  issue_text = issue_text_map[issue_id]
  file_str = '\n\n'.join(files)
  prompt = f'''\
  The following contains the detailed software requirements specification\
  of a Mechanical Lung Ventilator, provided between triple backticks,\
  consisting of {issue_file_names_map[issue_id]}.\
  Assume you are the creator of the software requirements specification and need to answer queries about your requirements.
  Evaluate the content to answer the following question:
  {issue_text}

  Software Requirements Specification:
  ```
  {defs_file}\n
  {file_str}
  ```
  '''

  g = open(store_path2 + str(issue_id) + '.txt', 'w+')
  updated_messages = template_str(prompt)

  answers = openai.ChatCompletion.create(
    model='gpt-4-turbo-preview',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

  f = open(store_path1 + str(issue_id) + '.txt', 'w+')
  updated_messages = template_str(prompt)

  answers = openai.ChatCompletion.create(
    model='gpt-3.5-turbo',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  f.write(res)
  f.write('\n')
  f.close()

store_path1 = '/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/5/With Image Description/Results - GPT3.5 with Images/Issues/'
store_path2 = '/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/5/With Image Description/Results - GPT4 with Images/Issues/'

issue_text = issues_global_prompt
file_str = load_file('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/5/With Image Description/All Cleaned Data with Images/mech_lung_ventilator.txt')
prompt = f'''\
The following contains the detailed software requirements specification\
of a Mechanical Lung Ventilator, provided between triple backticks.\
Assume you are the creator of the software requirements specification and need to answer queries about your requirements.
Evaluate the content to answer the following question:
{issue_text}

Software Requirements Specification:
```
{file_str}
```
'''

g = open(store_path2 + 'global.txt', 'w+')
updated_messages = template_str(prompt)

answers = openai.ChatCompletion.create(
  model='gpt-4-turbo-preview',
  temperature=0,
  messages=[updated_messages]
)
res = answers['choices'][0]['message']['content']
g.write(res)
g.write('\n')
g.close()

# f = open(store_path1 + 'global.txt', 'w+')
# updated_messages = template_str(prompt)

# answers = openai.ChatCompletion.create(
#   model='gpt-3.5-turbo',
#   temperature=0,
#   messages=[updated_messages]
# )
# res = answers['choices'][0]['message']['content']
# f.write(res)
# f.write('\n')
# f.close()

def checker(astr):
  name = astr.split()[0].lower()
  return name if (name in sections) else 'global'

sections = ['global', 'introduction', 'system', 'controller', 'gui', 'alarm', 'definitions']
requirements = ['comp', 'cont', 'ambi']

file_section = {}

fpath = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/All Cleaned Data with Images')
dirs = os.listdir(fpath)
for d in dirs:
  with open(os.path.join(fpath, d), "r") as f:
    content = f.read()
  file_section[checker(d.replace('.txt', ''))] = content
file_section.keys()

# adding definitions to the beginning of each section

filtered_sec = [s for s in sections if s not in ['definitions', 'global']]
for s in filtered_sec:
  file_section[s] = file_section['definitions'] + '\n\n' + file_section[s]
sections = ['global', 'introduction', 'system', 'controller', 'gui', 'alarm']

################################## for Issues
issues_prompts = {}
for section in sections:
  var_name = 'issues_' + section + '_prompt'
  issues_prompt = globals()[var_name] + '\n\n' + '```\n' + file_section[section] + '```\n'
  issues_prompt[section] = combined_prompt
issues_prompt.keys()

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT4 with Images')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Issues'), exist_ok = True)

keys = list(issues_prompt.keys())

for key in keys:
  g = open(os.path.join(results_path, 'Issues','') + key + '.txt', 'w+')

  updated_messages = template_str(issues_prompt[key])

  answers = openai.ChatCompletion.create(
    model='gpt-4-turbo-preview',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

results_path = os.path.join('/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/', fnumber, 'With Image Description/Results - GPT3.5 with Images')
os.makedirs(results_path, exist_ok = True)
os.makedirs(os.path.join(results_path, 'Issues'), exist_ok = True)

keys = list(issues_prompt.keys())

for key in keys[1:]:
  g = open(os.path.join(results_path, 'Issues','') + key + '.txt', 'w+')

  updated_messages = template_str(issues_prompt[key])

  answers = openai.ChatCompletion.create(
    model='gpt-3.5-turbo',
    temperature=0,
    messages=[updated_messages]
  )
  res = answers['choices'][0]['message']['content']
  g.write(res)
  g.write('\n')
  g.close()

"""# Versioning Changes"""

ver_comments = {
    '1' : {
      '1': 'Perhaps, FUN 10.5 needs to be more precise because according to the figure 2, the following scenario is possible:\n\n1 The system is in the ventilation mode\n2 Stop ventilation while the patient is still connected: the system becomes in StandBy mode\n3 It is possible to proceed with alarm testing : FUN 10.5 is violated',
      '2': 'FUN.4 still makes reference to Alarm mode.\nMoreover, is it possible to set ventilation parameters while having the patient connected. According to FUN10.5, this is forbidden. But Figure 2 allows that.',
    },
    '2': {
      '4': 'I\'m a little confused about FUN.20. It says that "the breathing cycle shall be defined by inspiratory pressure Pinsp_PCV relative to atmosphere, respiratory rate (RRPCV) and the ratio between the inspiratory and expiratory times (I:E PCV )." but what does this mean?\n\nFUN.21 (and FUN.25) talk about what triggers the start of the breathing cycle, but I don\'t understand what FUN.20 means by defining the breathing cycle. Is there a way you can re-explain this using triggers for the start and end of a breathing cycle?'
    },
    '3': {
      '7': 'I think a transition "Stop ventilation" is missing in Figure 3.1. It should be from State Ventilation to State Menu.',
      '8a': 'As states machines have common states, I think it would be better to have same labels on the equivalent transitions/states.\nFor instance, Does the condition "Ventilating", in Figure 3.1, mean "new patient" ? If so, we can replace the label Yes by "start Ventilation"?\nIn other words, it is not possible to have Figure 4.1 in State PSV/PCV and Figure 3.1 in State "Ventilating". Am I right?',
      '8b': 'As states machines (Figures 2.1, 3.1 and 4.1) have common states, I think it would be better to have same labels on the equivalent transitions/states.\nFor instance, does the condition "Ventilating", in Figure 3.1, mean "new patient" as that of Figure 2.1 ? If so, we can replace the label Yes by "start Ventilation"?\nIn other words, it is not possible to have Figure 4.1 in State PSV/PCV and Figure 3.1 in State "StartUp". Am I right?',
    },
    '4': {
      '9': 'I think it would better to add a state FailSafe to Figure 3.1 in order to make two different outgoing transitions from State SelfTest:\na. if the power is Off, the target of the transition will be the final state\nb. if the test fail, the target of the transition will be the state FailSafe',
      '10': 'How does an error, on the controller, affect/impact the GUI? There is a transition labelled "error" on Figure 4.1, but we do bot know how it is propagated on the GUI (Figure 3.1).',
      '11': 'In some parts of the document, the comparison of pressure drop is done by using >, in other parts is < (likely under the assumption that drop is negative?). We assume now that when there is a drop in the pressure, the drop is positive. For instance, if the pressure is 30cmH2O and suddenly it becomes 20cmH2O, the drop is positive (10cmH2O). The drop should actually measure the acceleration of the drop in pressure to really evaluate the intensity and in case initiate the inspiratory phase.'
    }
}

# for fileno, comments in ver_comments.items():
#   store_path1 = f'/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/{fileno}/Changes/Results - GPT3.5'
#   store_path2 = f'/content/drive/MyDrive/Lung Ventilator LLM/LUNG LLM/{fileno}/Changes/Results - GPT4'

#   for issue_id, comment in comments.items():
#     # issue_text = issue_text_map[issue_id]
#     # file_str = '\n\n'.join(files)
#     prompt = f'''\
#     The following contains the detailed software requirements specification\
#     of a Mechanical Lung Ventilator, provided between triple backticks.
#     Assume you are the creator of the software requirements specification and need to answer queries about your requirements.
#     Evaluate the content to answer the following question and how you will fix the specification:
#     {comment}

#     Software Requirements Specification:
#     ```
#     {full_file}\n
#     ```
#     '''

#     g = open(store_path2 + str(issue_id) + '.txt', 'w+')
#     updated_messages = template_str(prompt)

#     answers = openai.ChatCompletion.create(
#       model='gpt-4-turbo-preview',
#       temperature=0,
#       messages=[updated_messages]
#     )
#     res = answers['choices'][0]['message']['content']
#     g.write(res)
#     g.write('\n')
#     g.close()

#     f = open(store_path1 + str(issue_id) + '.txt', 'w+')
#     updated_messages = template_str(prompt)

#     answers = openai.ChatCompletion.create(
#       model='gpt-3.5-turbo',
#       temperature=0,
#       messages=[updated_messages]
#     )
#     res = answers['choices'][0]['message']['content']
#     f.write(res)
#     f.write('\n')
#     f.close()

"""# IEC Verification"""

# iec_global_prompt = """
# The following contains the detailed software requirements specification of a Mechanical Lung Ventilator, provided between triple backticks, consisting of Introduction, System Requirements, GUI Requirements, Controller Requirements, and Alarms sections. Evaluate the content for verifying the appropriate use of the standard IEC (International Electrotechnical Commission) 62304.
# Based on the content given:

# """
updated_messages = template_str("Do you have access to standard IEC (International Electrotechnical Commission) 62304?")
answers = openai.ChatCompletion.create(
  model='gpt-4-turbo-preview',
  temperature=0,
  messages=[updated_messages]
)